name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        exclude:
          # Skip beta on macOS and Windows for faster CI
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}

      - name: Check formatting
        run: cargo fmt --check
        if: matrix.rust == 'stable'

      - name: Run clippy
        run: cargo clippy --all-targets --all-features

      - name: Run unit tests
        run: cargo test --lib --all-features

      - name: Run integration tests
        run: cargo test --test '*' --all-features

      - name: Run doc tests
        run: cargo test --doc --all-features

      - name: Test build
        run: cargo build --release --all-features

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Run coverage
        run: cargo tarpaulin --out Xml --all-features

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./cobertura.xml
          fail_ci_if_error: false

  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install MkDocs dependencies
        run: |
          pip install --upgrade pip
          pip install mkdocs-material
          pip install mkdocs-minify-plugin
          pip install pymdown-extensions

      - name: Validate MkDocs configuration
        run: |
          cd src_docs
          mkdocs config

      - name: Build documentation (dry run)
        run: |
          cd src_docs
          mkdocs build --verbose --clean --strict

      - name: Check documentation links
        run: |
          echo "Checking for basic markdown syntax issues..."
          find src_docs/md -name "*.md" -exec echo "Validating: {}" \;
          # Basic validation - check files are not empty and have content
          find src_docs/md -name "*.md" -exec test -s {} \; -print

  create-release:
    name: Create Release
    needs: [test, security-audit, docs-check]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: tag_name
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_name.outputs.tag }}
          release_name: Release ${{ steps.tag_name.outputs.tag }}
          draft: false
          prerelease: ${{ contains(steps.tag_name.outputs.tag, '-') }}
          body: |
            ## Changes
            
            This release includes various improvements and bug fixes.
            
            ## Installation
            
            ### From GitHub Releases
            
            Download the appropriate binary for your platform from the assets below.
            
            ### From crates.io
            
            ```bash
            cargo install twars-url2md
            ```
            
            ### From Source
            
            ```bash
            git clone https://github.com/twardoch/twars-url2md.git
            cd twars-url2md
            git checkout ${{ steps.tag_name.outputs.tag }}
            cargo build --release
            ```

  build-release:
    name: Build Release Binary
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: twars-url2md-linux-x86_64
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: twars-url2md-linux-aarch64
            cross: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: twars-url2md-linux-x86_64-musl
            cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            name: twars-url2md-macos-x86_64
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            name: twars-url2md-macos-aarch64
            cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: twars-url2md-windows-x86_64.exe
            cross: false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binary
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Prepare binary
        shell: bash
        run: |
          binary_name="twars-url2md"
          if [ "${{ runner.os }}" = "Windows" ]; then
            binary_name="twars-url2md.exe"
          fi
          
          binary_path="target/${{ matrix.target }}/release/$binary_name"
          
          if [ "${{ runner.os }}" = "Windows" ]; then
            7z a "${{ matrix.name }}.zip" "$binary_path"
            echo "asset_name=${{ matrix.name }}.zip" >> $GITHUB_ENV
            echo "asset_path=./${{ matrix.name }}.zip" >> $GITHUB_ENV
          else
            tar czf "${{ matrix.name }}.tar.gz" -C "target/${{ matrix.target }}/release" "$binary_name"
            echo "asset_name=${{ matrix.name }}.tar.gz" >> $GITHUB_ENV
            echo "asset_path=./${{ matrix.name }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.asset_path }}
          asset_name: ${{ env.asset_name }}
          asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: [test, create-release]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${CRATES_TOKEN} --allow-dirty
        env:
          CRATES_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
